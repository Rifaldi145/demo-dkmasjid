/* eslint-disable jsx-a11y/alt-text */
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable react/jsx-no-duplicate-props */
/* eslint-disable react/no-children-prop */
import React, { useState, useEffect, useRef, useCallback } from "react";
import {
    chakra,
    FormControl,
    Flex,
    useColorModeValue,
    Center,
    Tabs,
    TabList,
    TabPanels,
    TabPanel,
    Tab,
    Alert,
    AlertIcon,
    Text,
    Grid,
    GridItem,
    InputGroup,
    InputLeftAddon,
    InputRightAddon,
    Input,
    Switch,
    Box,
    Tooltip,
    Button,
    AspectRatio,
    Image,
    Modal,
    ModalOverlay,
    ModalContent,
    ModalHeader,
    ModalBody,
    CloseButton,
    useMediaQuery,
} from "@chakra-ui/react";
import Card from "../../../components/Card/Card.js";
import Loader from 'react-loader-spinner';
import axios from 'axios';
import { ChromePicker } from "react-color";
const { fontfam } = require('../../../../theme/ListFontFamily')
import { Separator } from "../../../../theme/components/Separator/Separator";
import toast from "../../../../components/Toast";
import { Radio } from "antd";
import Iframe from 'react-iframe'
import { useHistory } from "react-router-dom";
import { BsArrowsFullscreen } from "react-icons/bs";

export default function TambahKontenLainnya() {
    const [isSm, isMd, isLg] = useMediaQuery([
        '(max-width: 320px)',
        '(min-width: 320px)',
        '(min-width: 768px)',
    ])
    let history = useHistory();
    let users = JSON.parse(localStorage.getItem('users'));
    const token = users.token;

    const maxDetik = 6400;
    const maxHari = 30;

    const notify = useCallback((type, message) => {
        toast({ type, message });
    }, []);
    
    const dismiss = useCallback(() => {
        toast.dismiss();
    }, []);

    const [loading, setLoading] = useState(true);
    const [errorLoading, setErrorLoading] = useState(null);

    const [openErrorWarnaBackground, setOpenErrorWarnaBackground] = useState(false);
    const [openErrorKonten, setOpenErrorKonten] = useState(false);
    const [openErrorGambar, setOpenErrorGambar] = useState(false);
    const [openErrorUrl, setOpenErrorUrl] = useState(false);

    const editorRef = useRef();
    const { CKEditor, ClassicEditor } = editorRef.current || {};
    const [editorLoaded, setEditorLoaded] = useState(false);

    const [durasi, setDurasi] = useState(5);
    const [maxUrut, setMaxUrut] = useState(1);
    const [urut, setUrut] = useState(1);
    const [terusMenerus, setTerusMenerus] = useState(true);
    const [batasTayang, setBatasTayang] = useState(7);
    const [active, setActive] = useState(true);
    const [kontenDisplayWarnaBg, setKontenDisplayWarnaBg] = useState(false);
    const [kontenWarnaBg, setKontenWarnaBg] = useState(null);
    const [konten, setKonten] = useState(null);
    const [kontenType, setKontenType] = useState(0);
    const [kontenFileGambar, setKontenFileGambar] = useState(null);
    const [kontenGambar, setKontenGambar] = useState(null);
    const [kontenUrl, setKontenUrl] = useState("");
    const [kontenGambarResize, setKontenGambarResize] = useState('100% 100%');
    const kontenGambarRef = useRef(null);

    const [isLoadingSimpan, setIsLoadingSimpan] = useState(false);

    const textColor = useColorModeValue("gray.600", "white");

    useEffect(() => {
        editorRef.current = {
            CKEditor: require("@ckeditor/ckeditor5-react").CKEditor,
            ClassicEditor: require('../../../../ckeditor5-build-with-htmlembed-master')
        }
        setEditorLoaded(true);
        loadData();
    }, []);

    async function loadData() {
        setLoading(true);
        setErrorLoading(null);
        try {
            await axios({
                method: 'GET',
                url: `${process.env.NEXT_PUBLIC_API_BACKEND}/api/baitiV1/edit-display/tambah-konten-lainnya`,
                headers: {
                    "Content-Type": `application/json`,
                    "Accept": `application/json`,
                    "Authorization": `Bearer ${token}`
                },
                
            }).then(async (res) => {
                setUrut(parseInt(res.data.maxUrut + 1));
                setMaxUrut(parseInt(res.data.maxUrut + 1));
                setLoading(false);
            });
        } catch (err) {
            setLoading(false);
            if(err.response.data != null) {
                setErrorLoading(err.response.data.message);
            } else {
                setErrorLoading(JSON.stringify(err.response));
            }
            console.log("err", err.response);
        }
    }

    const submitSimpan = async (event) => {
        event.preventDefault();
        setOpenErrorWarnaBackground(false);
        setOpenErrorKonten(false);
        setOpenErrorGambar(false);
        setOpenErrorUrl(false);
    
        var lanjut = true;
        if(kontenType == 1) {
            if(konten == null || konten == "") {
                setOpenErrorKonten(true);
                lanjut = false;
            }
            // if(kontenWarnaBg == null) {
            //     setOpenErrorWarnaBackground(true);
            //     lanjut = false;
            // }
        } else if(kontenType == 2) {
            if(kontenGambar == null) {
                setOpenErrorGambar(true);
                lanjut = false;
            }
        } else if(kontenType == 3) {
            if(kontenUrl == null || kontenUrl == "") {
                setOpenErrorUrl(true);
                lanjut = false;
            }
        }
        if(lanjut) {
            setIsLoadingSimpan(true);
            try {
                var screenSize = 'sm';
                if(isSm) {
                    screenSize = 'sm';
                } else if(isMd && !isLg) {
                    screenSize = 'md';
                } else if(isLg) {
                    screenSize = 'lg';
                }
                var formData = new FormData();
                formData.append('durasi', durasi);
                formData.append('urut', urut);
                formData.append('selalu_tayang', terusMenerus ? 1 : 0);
                formData.append('selesai_tayang', batasTayang);
                // formData.append('active', active ? 1 : 0);
                formData.append("type", kontenType);
                if(kontenWarnaBg != null && kontenWarnaBg != 'null' && kontenWarnaBg != '') {
                    formData.append("background", kontenWarnaBg);
                }
                formData.append("text", konten);
                formData.append("gambar", kontenFileGambar);
                formData.append("url", kontenUrl);
                formData.append("screen_size", screenSize);
    
                await axios({
                    method: 'POST',
                    url: `${process.env.NEXT_PUBLIC_API_BACKEND}/api/baitiV1/edit-display/tambah-konten-lainnya/simpan`,
                    headers: {
                        "Content-Type": `multipart/form-data`,
                        "Accept": `application/json`,
                        "Authorization": `Bearer ${token}`
                    },
                    data: formData
                }).then(async (res) => {
                    if(res.data.success) {
                        showSucess(res.data.message);
                        history.goBack();
                    } else {
                        showError(res.data.message);
                    }
                    setIsLoadingSimpan(false);
                });
            } catch (err) {
                console.log("err", err);
                setIsLoadingSimpan(false);
                if(err.response.data != null) {
                    showError(err.response.data.message);
                } else {
                    showError(JSON.stringify(err.response));
                }
            }
        }
    };
    
    function showSucess(message) {
        notify("success", message);
    }
    function showError(message) {
        notify("error", message);
    }

    return (
        <Flex flexDirection="column" pt={{ base: "90px", md: "85px" }} w={'100%'}>
            <Center w={'100%'}>
                <Flex overflowX={{ sm: "scroll", xl: "hidden" }} w={'100%'}
                    justify="center" align="center"
                >
                {
                    loading ?
                    <Flex p={5}>
                        <Loader type="Circles" color="#B3A5DA" height={40} width={40} style={{position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)'}}>
                            
                        </Loader>
                    </Flex>
                    :
                    <Card overflowX={{ sm: "scroll", xl: "hidden" }} p={{ sm: 2.5, lg: 5 }}>
                        {(() => {
                            if(errorLoading) {
                                return (
                                    <Alert rounded={'md'} status="error" mb="6">
                                        <AlertIcon />
                                        <Text color={textColor} fontSize={{ sm: '2xs', lg: 'sm' }} fontWeight={'bold'}>
                                            {errorLoading}
                                        </Text>
                                    </Alert>
                                )
                            } else {
                                return(
                                    <></>
                                )
                            }
                        })()}
                        <chakra.form onSubmit={submitSimpan}>
                            <FormControl>
                                <Flex flexDirection="column">
                                    <Grid templateColumns={{ sm: '1fr', lg: 'repeat(2, 1fr)'}} pb={2}>
                                        <GridItem colSpan={1}>
                                            <Grid templateColumns={{ sm: 'repeat(5, 1fr)', lg: 'repeat(5, 1fr)'}}>
                                                <GridItem colSpan={2}>
                                                    <Flex flexDirection="column" h={'100%'} justify="start" align="center">
                                                        <Flex flexDirection="column" w={'100%'} justify="start" align="start">
                                                            <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                Durasi
                                                            </Text>
                                                            <Text textAlign={'start'} color={'red'} fontSize={{ sm: 'xs', lg: 'sm' }} fontStyle={'italic'}>
                                                                Durasi dalam detik
                                                            </Text>
                                                        </Flex>
                                                    </Flex>
                                                </GridItem>
                                                <GridItem colSpan={3}>
                                                    <Flex flexDirection="row" h={'100%'} w={'100%'} justify={{ sm: 'end', lg: 'start' }} align="end">
                                                        <InputGroup
                                                            w={{ sm: '75%', lg: '50%' }}
                                                            size={{ sm: 'sm', lg: 'md' }}
                                                            fontSize={{ lg: 'sm', md: 'sm', sm: 'xs' }}
                                                            verticalAlign={'middle'}
                                                            textAlign={'center'}
                                                        >
                                                            <InputLeftAddon
                                                                cursor={'pointer'}
                                                                borderRightRadius={{ sm: '0px', lg: '0px' }}
                                                                borderLeftRadius={{ sm: '5px', lg: '5px' }}
                                                                onClick={() => {
                                                                    if(durasi > 1) {
                                                                        setDurasi(durasi - 1);
                                                                    }
                                                                }}
                                                                children={
                                                                <Center>
                                                                    <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                        -
                                                                    </Text>
                                                                </Center>
                                                            }/>
                                                            <Input
                                                                onChange={(event) => {
                                                                    if(event.target.value < 1) {
                                                                        setDurasi(1);
                                                                    } else if(event.target.value > maxDetik) {
                                                                        setDurasi(maxDetik);
                                                                    } else {
                                                                        setDurasi(event.target.value);
                                                                    }
                                                                }}
                                                                value={durasi}
                                                                w={'100%'}
                                                                size={{ sm: 'sm' , lg: 'md'}}
                                                                fontSize={{ sm: 'xs', md: 'sm', lg: 'sm' }}
                                                                bgColor="white"
                                                                color={textColor}
                                                                verticalAlign={'middle'}
                                                                textAlign={'center'}
                                                                borderRadius={{ sm: 0, md: 0, lg: 0 }}
                                                                type="number"
                                                            />
                                                            <InputRightAddon
                                                                cursor={'pointer'}
                                                                borderLeftRadius={{ sm: '0px', lg: '0px' }}
                                                                borderRightRadius={{ sm: '5px', lg: '5px' }}
                                                                onClick={() => {
                                                                    if(durasi < maxDetik) {
                                                                        setDurasi(durasi + 1);
                                                                    }
                                                                }}
                                                                children={
                                                                <Center>
                                                                    <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                        +
                                                                    </Text>
                                                                </Center>
                                                            }/>
                                                        </InputGroup>
                                                    </Flex>
                                                </GridItem>
                                            </Grid>
                                        </GridItem>
                                    </Grid>
                                    <Grid templateColumns={{ sm: '1fr', lg: 'repeat(2, 1fr)'}} pb={4}>
                                        <GridItem colSpan={1}>
                                            <Grid templateColumns={{ sm: 'repeat(5, 1fr)', lg: 'repeat(5, 1fr)'}}>
                                                <GridItem colSpan={2}>
                                                    <Flex flexDirection="row" h={'100%'} justify="start" align="center">
                                                        <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                            Urut
                                                        </Text>
                                                    </Flex>
                                                </GridItem>
                                                <GridItem colSpan={3}>
                                                    <Flex flexDirection="row" h={'100%'} w={'100%'} justify={{ sm: 'end', lg: 'start' }} align="end">
                                                        <InputGroup
                                                            w={{ sm: '75%', lg: '50%' }}
                                                            size={{ sm: 'sm', lg: 'md' }}
                                                            fontSize={{ lg: 'sm', md: 'sm', sm: 'xs' }}
                                                            verticalAlign={'middle'}
                                                            textAlign={'center'}
                                                        >
                                                            <InputLeftAddon
                                                                cursor={'pointer'}
                                                                borderRightRadius={{ sm: '0px', lg: '0px' }}
                                                                borderLeftRadius={{ sm: '5px', lg: '5px' }}
                                                                onClick={() => {
                                                                    // if(urut > 1) {
                                                                    //     setUrut(urut - 1);
                                                                    // }
                                                                }}
                                                                children={
                                                                <Center>
                                                                    <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                        -
                                                                    </Text>
                                                                </Center>
                                                            }/>
                                                            <Input
                                                                onChange={(event) => {
                                                                    // if(event.target.value < 1) {
                                                                    //     setUrut(1);
                                                                    // } else if(event.target.value > maxUrut) {
                                                                    //     setUrut(maxUrut);
                                                                    // } else {
                                                                    //     setUrut(event.target.value);
                                                                    // }
                                                                }}
                                                                value={urut}
                                                                w={'100%'}
                                                                size={{ sm: 'sm' , lg: 'md'}}
                                                                fontSize={{ sm: 'xs', md: 'sm', lg: 'sm' }}
                                                                verticalAlign={'middle'}
                                                                textAlign={'center'}
                                                                borderRadius={{ sm: 0, md: 0, lg: 0 }}
                                                                bgColor="white" color={textColor}
                                                                type="number"
                                                            />
                                                            <InputRightAddon
                                                                cursor={'pointer'}
                                                                borderLeftRadius={{ sm: '0px', lg: '0px' }}
                                                                borderRightRadius={{ sm: '5px', lg: '5px' }}
                                                                onClick={() => {
                                                                    // if(urut < maxUrut) {
                                                                    //     setUrut(urut + 1);
                                                                    // }
                                                                }}
                                                                children={
                                                                <Center>
                                                                    <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                        +
                                                                    </Text>
                                                                </Center>
                                                            }/>
                                                        </InputGroup>
                                                    </Flex>
                                                </GridItem>
                                            </Grid>
                                        </GridItem>
                                    </Grid>
                                    <Grid templateColumns={{ sm: '1fr', lg: 'repeat(2, 1fr)'}}>
                                        <GridItem colSpan={1}>
                                            <Grid templateColumns={{ sm: 'repeat(5, 1fr)', lg: 'repeat(5, 1fr)'}}>
                                                <GridItem colSpan={2}>
                                                    <Flex flexDirection="row" h={'100%'} justify="start" align="center">
                                                        <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                            Selalu Tayang
                                                        </Text>
                                                    </Flex>
                                                </GridItem>
                                                <GridItem colSpan={3}>
                                                    <Flex flexDirection="row" h={'100%'} w={'100%'} justify={{ sm: 'end', lg: 'start' }} align="end">
                                                        <Switch
                                                            colorscheme="teal" me="10px" isChecked={terusMenerus}
                                                            onChange={(event) => {
                                                                setTerusMenerus(event.target.checked);
                                                            }}
                                                        />
                                                    </Flex>
                                                </GridItem>
                                            </Grid>
                                        </GridItem>
                                    </Grid>
                                    {(() => {
                                        if(!terusMenerus) {
                                            return (
                                                <Grid templateColumns={{ sm: '1fr', lg: 'repeat(2, 1fr)'}} pt={4} pb={4}>
                                                    <GridItem colSpan={1}>
                                                        <Grid templateColumns={{ sm: 'repeat(5, 1fr)', lg: 'repeat(5, 1fr)'}}>
                                                            <GridItem colSpan={2}>
                                                                <Flex flexDirection="column" h={'100%'} justify="start" align="center">
                                                                    <Flex flexDirection="column" w={'100%'} justify="start" align="start">
                                                                        <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                            Batas Tayang
                                                                        </Text>
                                                                        <Text textAlign={'start'} color={'red'} fontSize={{ sm: 'xs', lg: 'sm' }} fontStyle={'italic'}>
                                                                            Durasi dalam hari
                                                                        </Text>
                                                                    </Flex>
                                                                </Flex>
                                                            </GridItem>
                                                            <GridItem colSpan={3}>
                                                                <Flex flexDirection="row" h={'100%'} w={'100%'} justify={{ sm: 'end', lg: 'start' }} align="end">
                                                                    <InputGroup
                                                                        w={{ sm: '75%', lg: '50%' }}
                                                                        size={{ sm: 'sm', lg: 'md' }}
                                                                        fontSize={{ lg: 'sm', md: 'sm', sm: 'xs' }}
                                                                        verticalAlign={'middle'}
                                                                        textAlign={'center'}
                                                                    >
                                                                        <InputLeftAddon
                                                                            cursor={'pointer'}
                                                                            borderRightRadius={{ sm: '0px', lg: '0px' }}
                                                                            borderLeftRadius={{ sm: '5px', lg: '5px' }}
                                                                            onClick={() => {
                                                                                if(batasTayang > 1) {
                                                                                    setBatasTayang(batasTayang - 1);
                                                                                }
                                                                            }}
                                                                            children={
                                                                            <Center>
                                                                                <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                                    -
                                                                                </Text>
                                                                            </Center>
                                                                        }/>
                                                                        <Input
                                                                            onChange={(event) => {
                                                                                if(event.target.value < 1) {
                                                                                    setBatasTayang(1);
                                                                                } else if(event.target.value > maxHari) {
                                                                                    setBatasTayang(maxHari);
                                                                                } else {
                                                                                    setBatasTayang(event.target.value);
                                                                                }
                                                                            }}
                                                                            value={batasTayang}
                                                                            w={'100%'}
                                                                            size={{ sm: 'sm' , lg: 'md'}}
                                                                            fontSize={{ sm: 'xs', md: 'sm', lg: 'sm' }}
                                                                            verticalAlign={'middle'}
                                                                            textAlign={'center'}
                                                                            borderRadius={{ sm: 0, md: 0, lg: 0 }}
                                                                            bgColor="white" color={textColor}
                                                                            type="number"
                                                                        />
                                                                        <InputRightAddon
                                                                            cursor={'pointer'}
                                                                            borderLeftRadius={{ sm: '0px', lg: '0px' }}
                                                                            borderRightRadius={{ sm: '5px', lg: '5px' }}
                                                                            onClick={() => {
                                                                                if(batasTayang < maxHari) {
                                                                                    setBatasTayang(batasTayang + 1);
                                                                                }
                                                                            }}
                                                                            children={
                                                                            <Center>
                                                                                <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                                    +
                                                                                </Text>
                                                                            </Center>
                                                                        }/>
                                                                    </InputGroup>
                                                                </Flex>
                                                            </GridItem>
                                                        </Grid>
                                                    </GridItem>
                                                </Grid>
                                            )
                                        } else {
                                            return <></>
                                        }
                                    })()}
                                    {/* <Grid templateColumns={{ sm: '1fr', lg: 'repeat(2, 1fr)'}}>
                                        <GridItem colSpan={1}>
                                            <Grid templateColumns={{ sm: 'repeat(5, 1fr)', lg: 'repeat(5, 1fr)'}}>
                                                <GridItem colSpan={2}>
                                                    <Flex flexDirection="row" h={'100%'} justify="start" align="center">
                                                        <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                            Aktif
                                                        </Text>
                                                    </Flex>
                                                </GridItem>
                                                <GridItem colSpan={3}>
                                                    <Flex flexDirection="row" h={'100%'} w={'100%'} justify={{ sm: 'end', lg: 'start' }} align="end">
                                                        <Switch
                                                            colorscheme="teal" me="10px" isChecked={active}
                                                            onChange={(event) => {
                                                                setActive(event.target.checked);
                                                            }}
                                                        />
                                                    </Flex>
                                                </GridItem>
                                            </Grid>
                                        </GridItem>
                                    </Grid> */}
                                    <Box pb={4} pt={4}>
                                        <Separator></Separator>
                                    </Box>
                                    <Grid pb={2} templateColumns={{ sm: '1fr', lg: 'repeat(2, 1fr)'}}>
                                        <GridItem colSpan={1}>
                                            <Flex p={2} flexDirection="column" bg={'gray.200'} borderRadius={{ sm: '5px', lg: '5px' }}>
                                                <Radio.Group
                                                    onChange={(e) => {
                                                        setKontenType(e.target.value);
                                                        setOpenErrorUrl(false);
                                                        setOpenErrorGambar(false);
                                                        setOpenErrorKonten(false);
                                                        setOpenErrorWarnaBackground(false);
                                                    }}
                                                    value={kontenType}
                                                    style={{ width: "100%" }}
                                                >
                                                    <Grid templateColumns={{ sm: 'repeat(2, 1fr)', lg: 'repeat(4, 1fr)'}}>
                                                        <GridItem colSpan={1}>
                                                            <Flex flexDirection="row" justify="start" align="center">
                                                                <Radio value={0}></Radio>
                                                                <Text pl={2} color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                    Default
                                                                </Text>
                                                            </Flex>
                                                        </GridItem>
                                                        <GridItem colSpan={1}>
                                                            <Flex flexDirection="row" justify="start" align="center">
                                                                <Radio value={1}></Radio>
                                                                <Text pl={2} color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                    Teks
                                                                </Text>
                                                            </Flex>
                                                        </GridItem>
                                                        <GridItem colSpan={1}>
                                                            <Flex flexDirection="row" justify="start" align="center">
                                                                <Radio value={2}></Radio>
                                                                <Text pl={2} color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                    Gambar
                                                                </Text>
                                                            </Flex> 
                                                        </GridItem>
                                                        <GridItem colSpan={1}>
                                                            <Flex flexDirection="row" justify="start" align="center">
                                                                <Radio value={3}></Radio>
                                                                <Text pl={2} color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                    Url
                                                                </Text>
                                                            </Flex> 
                                                        </GridItem>
                                                    </Grid>
                                                </Radio.Group>
                                            </Flex>
                                        </GridItem>
                                    </Grid>
                                </Flex>
                                {(() => {
                                    if(kontenType == 1) {
                                        return (
                                            <Flex w={{ sm: '100%', lg: '50%' }} pb={2} flexDirection="row" justify="space-between" width={'100%'} align="center">
                                                <Tooltip hasArrow bg='red.600' color={'white'} label='Pilih warna background' isOpen={openErrorWarnaBackground}>
                                                    <Button
                                                        size={{ sm: 'sm', lg: 'sm' }}
                                                        fontSize={{ sm: 'xs', lg: 'sm' }}
                                                        color={textColor}
                                                        bg={kontenWarnaBg == null ? 'white' : kontenWarnaBg}
                                                        style={{ border: '1px solid #c6c5c5' }}
                                                        _hover={{ bg: "#B3A5DA", color: textColor }}
                                                        onClick={() => {
                                                            setOpenErrorWarnaBackground(false);
                                                            if(kontenDisplayWarnaBg) {
                                                                setKontenDisplayWarnaBg(false);
                                                            } else {
                                                                setKontenDisplayWarnaBg(true);
                                                            }
                                                        }}
                                                    >
                                                        {kontenWarnaBg == null ? 'Pilih Warna Background' : kontenWarnaBg}
                                                    </Button>
                                                </Tooltip>
                                            </Flex>
                                        )
                                    } else if(kontenType == 2) {
                                        return (
                                            <Flex w={{ sm: '100%', lg: '50%' }} pb={2} flexDirection="row" justify="space-between" width={'100%'} align="center">
                                                <Tooltip hasArrow bg='red.600' color={'white'} label='Pilih gambar' isOpen={openErrorGambar}>
                                                    <Button
                                                        size={{ sm: 'sm', lg: 'sm' }}
                                                        fontSize={{ sm: 'xs', lg: 'sm' }}
                                                        color={textColor}
                                                        bg={'white'}
                                                        style={{ border: '1px solid #c6c5c5' }}
                                                        _hover={{ bg: "#B3A5DA", color: textColor }}
                                                        onClick={(event)=> { 
                                                            event.target.value = null;
                                                            setOpenErrorGambar(false);
                                                            kontenGambarRef.current?.click()
                                                        }}
                                                    >
                                                        Pilih Gambar
                                                        <input 
                                                            type='file'
                                                            accept="image/*"
                                                            multiple={false}
                                                            style={{ display: 'none' }}
                                                            ref={kontenGambarRef}
                                                            onChange={(event) => {
                                                                let fileObj = event.target.files[0];
                                                                setKontenFileGambar(fileObj);
                                                                const objectUrl = URL.createObjectURL(fileObj)
                                                                setKontenGambar(objectUrl)
                                                            }}
                                                        />
                                                    </Button>
                                                </Tooltip>
                                            </Flex>
                                        )
                                    } else if(kontenType == 3) {
                                        return (
                                            <Flex w={{ sm: '100%', lg: '50%' }} pb={2} flexDirection="row" justify="space-between" width={'100%'} align="center">
                                                <Tooltip hasArrow bg='red.600' color={'white'} label='Isi url' isOpen={openErrorUrl}>
                                                    <Input
                                                        size={{ sm: 'sm' , lg: 'md'}}
                                                        fontSize={{ sm: 'xs', md: 'sm', lg: 'sm' }}
                                                        bgColor="white"
                                                        color={textColor}
                                                        verticalAlign={'middle'}
                                                        borderRadius={{ sm: '5px', lg: '5px' }}
                                                        type="text" placeholder="Masukkan url"
                                                        value={kontenUrl}
                                                        onChange={(event) => {
                                                            setOpenErrorUrl(false);
                                                            setKontenUrl(event.target.value);
                                                        }}
                                                    />
                                                </Tooltip>
                                            </Flex>
                                        )
                                    } else {
                                        return <></>
                                    }
                                })()}
                                <Flex flexDirection="column" w={'100%'}>
                                    <Grid templateColumns={{ sm: '1fr', lg: 'repeat(2, 1fr)'}}>
                                        {(() => {
                                            if(kontenType == 1) {
                                                return(
                                                    <GridItem colSpan={1} pr={{ lg: 1, sm: 0 }}>
                                                        <Flex flexDirection="column" w={'100%'}>
                                                            <Tooltip hasArrow bg='red.600' color={'white'} label='Isi konten' isOpen={openErrorKonten}>
                                                                <Flex
                                                                    flexDirection={'column'}
                                                                    w={'100%'}
                                                                    justify="center" align="center"
                                                                >
                                                                    <AspectRatio w={'100%'} ratio={{ sm: 16/9.2, lg: 16/8.025 }}>
                                                                        <Flex flexDirection={'row'} w={'100%'} h={'100%'} justify="center" align="center"
                                                                            style={{ border: '1px solid #c6c5c5', borderRadius: '5px' }}
                                                                            bg={'blackAlpha.300'}
                                                                        >
                                                                            {(() => {
                                                                                if((editorLoaded)) {
                                                                                    return (
                                                                                        <Flex flexDirection={'column'} w={'100%'} h={'100%'}>
                                                                                            <Flex flexDirection={'column'} w={'100%'} h={'100%'}
                                                                                                fontSize={{ lg: 'sm', md: 'sm', sm: '2xs' }}
                                                                                                lineHeight={1}
                                                                                            >
                                                                                                <CKEditor
                                                                                                    config={{
                                                                                                        heading: {
                                                                                                            options: [
                                                                                                                { model: 'paragraph', title: 'Paragraph' },
                                                                                                                { model: 'heading1', view: 'h1', title: 'Heading 1' },
                                                                                                                { model: 'heading2', view: 'h2', title: 'Heading 2' },
                                                                                                                { model: 'heading3', view: 'h3', title: 'Heading 3' },
                                                                                                                { model: 'heading4', view: 'h4', title: 'Heading 4' }
                                                                                                            ]
                                                                                                        },
                                                                                                        toolbar: {
                                                                                                            items: [
                                                                                                                'heading', '|',
                                                                                                                'fontfamily',
                                                                                                                'alignment', '|',
                                                                                                                'fontColor', 'fontBackgroundColor', '|',
                                                                                                                'bold', 'italic', 'underline', '|',
                                                                                                                'link', '|',
                                                                                                                'outdent', 'indent', '|',
                                                                                                                'bulletedList', 'numberedList', '|',
                                                                                                                'undo', 'redo'
                                                                                                            ],
                                                                                                            viewportTopOffset: 1,
                                                                                                        },
                                                                                                    }}
                                                                                                    onReady={ editorRef => {
                                                                                                        const toolbarElement = editorRef.ui.view.toolbar.element;
                                                                                                        toolbarElement.style.borderTop = 'none';
                                                                                                        toolbarElement.style.borderLeft = 'none';
                                                                                                        toolbarElement.style.borderRight = 'none';
                                                                                                        toolbarElement.style.borderBottom = '1px solid #c6c5c5';

                                                                                                        editorRef.editing.view.change( writer => {
                                                                                                            // writer.setStyle( 'height', '100vh', editorRef.editing.view.document.getRoot());
                                                                                                            writer.setStyle( 'background-color', 'transparent', editorRef.editing.view.document.getRoot());
                                                                                                            writer.setStyle( 'margin-top', '0px', editorRef.editing.view.document.getRoot());
                                                                                                            writer.setStyle( 'padding-top', '0px', editorRef.editing.view.document.getRoot());
                                                                                                            writer.setStyle( 'min-height', '100%', editorRef.editing.view.document.getRoot());
                                                                                                            writer.setStyle( 'border', 'none', editorRef.editing.view.document.getRoot());
                                                                                                            writer.setStyle( 'border-bottom-radius', '5px', editorRef.editing.view.document.getRoot());
                                                                                                            writer.setStyle( 'box-shadow', 'none', editorRef.editing.view.document.getRoot());
                                                                                                        } );
                                                                                                        editorRef = editorRef;
                                                                                                    }}
                                                                                                    onError = {
                                                                                                        (error, { willEditorRestart } ) => {
                                                                                                            if(willEditorRestart ) {
                                                                                                                editorRef.ui.view.toolbar.element.remove();
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    onChange={(event, editor) => {
                                                                                                        const data = editor.getData();
                                                                                                        setOpenErrorKonten(false);
                                                                                                        setKonten(data);
                                                                                                    }}
                                                                                                    editor={ ClassicEditor }
                                                                                                    data = {konten}
                                                                                                />
                                                                                            </Flex>
                                                                                        </Flex>
                                                                                    )
                                                                                } else {
                                                                                    return(
                                                                                        <></>
                                                                                    )
                                                                                }
                                                                            })()}
                                                                        </Flex>
                                                                    </AspectRatio>
                                                                </Flex>
                                                            </Tooltip>
                                                        </Flex>
                                                    </GridItem>
                                                )
                                            } else {
                                                return <></>
                                            }
                                        })()}
                                        <GridItem colSpan={1} pt={{ sm: kontenType == 1 ? 2 : 0, lg: 0 }} pl={{ lg: kontenType == 1 ? 1 : 0, sm: 0 }}>
                                            <Flex flexDirection="column" w={'100%'}>
                                                <Alert h={ 'auto' } px={2} py={{ lg: 2, sm: 1 }} rounded={'md'} status="warning" bg={"gray.200"} w={'100%'} borderBottomRadius={'0px'}>
                                                    <Flex flexDirection="column" justify={'start'} align="center" w={'100%'}>
                                                        <Flex flexDirection="row" justify={'start'} align="center" w={'100%'} h={'100%'}>
                                                            <AlertIcon style={{ width: '14px', marginRight: 5 }} />
                                                            <Text color={textColor} fontSize={{ sm: 'xs', lg: 'sm' }}>
                                                                Tampil pada urutan {urut} selama {durasi} detik
                                                            </Text>
                                                        </Flex>
                                                    </Flex>
                                                </Alert>
                                                <Flex
                                                    flexDirection={'row'}
                                                    w={'100%'}
                                                    borderBottomRadius={{ sm: '5px', lg: '5px' }}
                                                    justify="center" align="center"
                                                >
                                                    <AspectRatio w={'100%'} ratio={16/9.75}>
                                                        <Flex flexDirection={'row'} style={{width: '100%', height: '70%'}}  borderBottomRadius={{ sm: '5px', lg: '5px' }} justify="center" align="center">
                                                            {(() => {
                                                                if(kontenType == 0) {
                                                                    return (
                                                                        <Flex
                                                                            w={'100%'} h={'100%'}
                                                                            bgGradient='linear(#23283a 0%, #41475d 50%)'
                                                                            style={{ border: '1px solid #c6c5c5' }}
                                                                            borderBottomRadius={{ sm: '5px', lg: '5px' }}
                                                                            justify="center" align="center"
                                                                        >
                                                                            <Image w={'100%'} h={'100%'} src={ '/template_image_konten_lainnya.png' }/>
                                                                        </Flex>
                                                                    )
                                                                } else if(kontenType == 1) {
                                                                    if((konten == null || konten == "") && kontenWarnaBg == null) {
                                                                        return (
                                                                            <Flex
                                                                                w={'100%'} h={'100%'}
                                                                                bgGradient='linear(#23283a 0%, #41475d 50%)'
                                                                                style={{ border: '1px solid #c6c5c5' }}
                                                                                borderBottomRadius={{ sm: '5px', lg: '5px' }}
                                                                                justify="center" align="center"
                                                                            >
                                                                                <Image w={'100%'} h={'100%'} src={ '/template_image_konten_lainnya.png' }/>
                                                                            </Flex>
                                                                        )
                                                                    } else {
                                                                        return(
                                                                            <Box
                                                                                w={'100%'} h={'100%'}
                                                                                flexDirection="column"
                                                                                style={{ border: '1px solid #c6c5c5' }}
                                                                                borderBottomRadius={{ sm: '5px', lg: '5px' }}
                                                                                bgGradient='linear(#23283a 0%, #41475d 50%)'
                                                                            >
                                                                                <Box
                                                                                    w={'100%'} h={'100%'}
                                                                                    bg={kontenWarnaBg}
                                                                                    bgImage={ kontenWarnaBg == null ? "url('/template_image_konten_lainnya.png')" : "url('')"}
                                                                                    bgSize={'100% 100%'}
                                                                                    bgRepeat={'no-repeat'}
                                                                                    bgPosition={'center'}
                                                                                >
                                                                                    <Box
                                                                                        pl={{ lg: 2, sm: 1.5 }}
                                                                                        pr={{ lg: 2, sm: 1.5 }}
                                                                                        pt={{ lg: 4, sm: 2 }}
                                                                                        fontSize={{ lg: 'sm', md: 'sm', sm: '2xs' }}
                                                                                        lineHeight={1}
                                                                                        w={'100%'}
                                                                                        dangerouslySetInnerHTML={{__html: konten}}
                                                                                    ></Box>
                                                                                </Box>
                                                                            </Box>
                                                                        )
                                                                    }
                                                                } else if(kontenType == 2) {
                                                                    return (
                                                                        <Flex
                                                                            w={'100%'} h={'100%'}
                                                                            bgGradient='linear(#23283a 0%, #41475d 50%)'
                                                                            style={{ border: '1px solid #c6c5c5' }}
                                                                            borderBottomRadius={{ sm: '5px', lg: '5px' }}
                                                                            justify="center" align="center"
                                                                            bgImage={ kontenGambar == null ? "url('/template_image_konten_lainnya.png')" : "url('"+kontenGambar+"')"}
                                                                            bgSize={kontenGambarResize}
                                                                            bgRepeat={'no-repeat'}
                                                                            bgPosition={'center'}
                                                                        >
                                                                            <Flex
                                                                                bottom={0}
                                                                                right={0}
                                                                                position={'absolute'}
                                                                                m={4}
                                                                                size={'xs'}
                                                                            >
                                                                                <BsArrowsFullscreen
                                                                                    cursor={'pointer'} size="25" color="#B8B8B8"
                                                                                    onClick={() => {
                                                                                        if(kontenGambarResize == '100% 100%') {
                                                                                            setKontenGambarResize('contain');
                                                                                        } else {
                                                                                            setKontenGambarResize('100% 100%');
                                                                                        }
                                                                                    }}
                                                                                />
                                                                            </Flex>
                                                                        </Flex>
                                                                    )
                                                                } else if(kontenType == 3) {
                                                                    return (
                                                                        <Flex
                                                                            w={'100%'} h={'100%'}
                                                                            style={{ border: '1px solid #c6c5c5' }}
                                                                            borderBottomRadius={{ sm: '5px', lg: '5px' }}
                                                                            justify="center" align="center"
                                                                        >
                                                                            <Iframe url={kontenUrl}
                                                                                width={'100%'}
                                                                                height={'100%'}
                                                                                id="myId"
                                                                                className="myClassname"
                                                                                display="initial"
                                                                                position="relative"
                                                                            />
                                                                        </Flex>
                                                                    )
                                                                } else {
                                                                    return <></>
                                                                }
                                                            })()}
                                                        </Flex>
                                                    </AspectRatio>
                                                </Flex>
                                            </Flex>
                                        </GridItem>
                                    </Grid>
                                </Flex>
                            </FormControl>
                            <Center>
                                <Flex justify="space-between" align="center" w="100%">
                                    <Button
                                        onClick={history.goBack}
                                        size={{ sm: 'sm', lg: 'sm' }}
                                        fontSize={{ sm: 'xs', lg: 'sm' }}
                                        bg="gray.200"
                                        color={textColor}
                                        _hover={{ bg: "#B3A5DA", color: textColor }}
                                    >
                                        Kembali
                                    </Button>
                                    {
                                        errorLoading == null ?
                                        <Button
                                            isLoading={isLoadingSimpan}
                                            type="submit"
                                            size={{ sm: 'sm', lg: 'sm' }}
                                            fontSize={{ sm: 'xs', lg: 'sm' }}
                                            bg="#6a5aa3"
                                            color="white"
                                            _hover={{ bg: "#B3A5DA", color: textColor }}
                                        >
                                            Simpan
                                        </Button>
                                        : <></>
                                    }
                                </Flex>
                            </Center>
                            <Modal bgColor={'transparent'} size={'xs'} closeOnOverlayClick={false} isCentered onClose={!kontenDisplayWarnaBg} isOpen={kontenDisplayWarnaBg}>
                                <ModalOverlay
                                    bg='none'
                                    backdropFilter='auto'
                                    backdropInvert='80%'
                                    backdropBlur='2px'
                                />
                                <ModalContent bgColor={'transparent'}>
                                    <ModalHeader color={'white'} bgColor={'transparent'} size="xs" borderRadius={{ sm: '5px', lg: '5px' }}>
                                        <Flex justify="space-between" align="center">
                                            <Box></Box>
                                            <CloseButton color={textColor} size="sm" fontSize={{ sm: 'xs', lg: 'sm' }} onClick={() => setKontenDisplayWarnaBg(false)}/>
                                        </Flex>
                                    </ModalHeader>
                                    <ModalBody>
                                        <Center>
                                            <ChromePicker
                                                color={kontenWarnaBg == null ? '#FFFFFF' : kontenWarnaBg}
                                                onChange={(color) => {
                                                    setKontenWarnaBg(color.hex);
                                                }}
                                            />
                                        </Center>
                                    </ModalBody>
                                </ModalContent>
                            </Modal>
                        </chakra.form>
                    </Card>
                }
                </Flex>
            </Center>
        </Flex>
    );
}